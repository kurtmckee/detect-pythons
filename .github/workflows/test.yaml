name: "ðŸ”¬ Test"

on:
  pull_request: null
  push:
    branches:
      - "main"
      - "releases"

jobs:
  tox:
    name: "Tox (${{ matrix.os.name }})"

    strategy:
      matrix:
        os:
          - name: "Linux"
            runner: "ubuntu-latest"
          - name: "macOS"
            runner: "macos-latest"
          - name: "Windows"
            runner: "windows-latest"

        # Each operating system should test all Python interpreters simultaneously.
        # This nested-list syntax accomplishes that goal
        # without creating cross-products of every possible OS and interpreter.
        #
        # Note: The CPython interpreter versions should be in ascending order
        # because the last-listed version will be the default CPython version.
        #
        cpythons:
          - - "3.8"
            - "3.9"
            - "3.10"
            - "3.11"
            - "3.12"
        cpython-beta:
          - "3.13"
        pypys:
          - - "3.8"
            - "3.9"
            - "3.10"
      fail-fast: false

    runs-on: "${{ matrix.os.runner }}"
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1

      - name: "Setup Pythons"
        uses: "actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c" # v5.0.0
        with:
          python-version: "${{
            format(
              '{0}\n{1}\n{2}',
              format('pypy{0}', join(matrix.pypys, '\npypy')),
              matrix.cpython-beta,
              join(matrix.cpythons, '\n')
            )
            }}"
          allow-prereleases: true

      - name: "Detect Pythons"
        uses: "./"

      - name: "Restore cache"
        id: "restore-cache"
        uses: "actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319" # v4.0.1
        with:
          path: |
            .tox/
            .venv
          key: "tox-os=${{ matrix.os.runner }}-hash=${{ hashFiles('.python-identifiers', 'tox.ini') }}"

      - name: "Identify .venv path"
        shell: "bash"
        run: "echo 'venv-path=.venv/${{ runner.os == 'Windows' && 'Scripts' || 'bin' }}' >> $GITHUB_ENV"

      - name: "Create a virtual environment"
        if: "steps.restore-cache.outputs.cache-hit == false"
        run: |
          python -m venv .venv
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/pip install tox

      - name: "Run the test suite"
        run: "${{ env.venv-path }}/tox"

  inputs:
    name: "Inputs (${{ matrix.os.name }})"

    strategy:
      matrix:
        os:
          - name: "Linux"
            runner: "ubuntu-latest"
          - name: "macOS"
            runner: "macos-latest"
          - name: "Windows"
            runner: "windows-latest"
      fail-fast: false

    runs-on: "${{ matrix.os.runner }}"
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1

      - name: "Test: Disable output file"
        uses: "./"
        with:
          identifiers-filename: ""

      - name: "Verify: Disable output file"
        shell: "bash"
        run: |
          if [[ -e .python-identifiers ]]; then
            exit 1
          fi

      - name: "Test: Default output filename"
        uses: "./"

      - name: "Verify: Default output filename"
        shell: "bash"
        run: |
          if [[ ! -e .python-identifiers ]]; then
            exit 1
          else
            rm ".python-identifiers"
          fi

      - name: "Test: Custom output filename"
        uses: "./"
        with:
          identifiers-filename: "favored-filename.txt"

      - name: "Verify: Custom output filename"
        shell: "bash"
        run: |
          if [[ ! -e "favored-filename.txt" ]]; then
            exit 1
          else
            rm "favored-filename.txt"
          fi
